const axios = require('axios');

const API_BASE = 'http://localhost:3001';
const colors = ['jaune', 'bleu', 'vert', 'rouge'];

// Fonction pour tester l'API
async function testAPI() {
  console.log('üß™ Test de l\'API Convoyeur Intelligent\n');

  try {
    // Test 1: V√©rifier le statut du serveur
    console.log('1Ô∏è‚É£ Test du statut du serveur...');
    const statusResponse = await axios.get(`${API_BASE}/status`);
    console.log('‚úÖ Serveur en ligne:', statusResponse.data.status);
    console.log('‚è±Ô∏è  Uptime:', Math.round(statusResponse.data.uptime), 'secondes\n');

    // Test 2: R√©initialiser les donn√©es
    console.log('2Ô∏è‚É£ R√©initialisation des donn√©es...');
    await axios.post(`${API_BASE}/reset`);
    console.log('‚úÖ Donn√©es r√©initialis√©es\n');

    // Test 3: Envoyer des d√©tections de test
    console.log('3Ô∏è‚É£ Envoi de d√©tections de test...');
    for (let i = 0; i < 10; i++) {
      const couleur = colors[Math.floor(Math.random() * colors.length)];
      const timestamp = "aaa";
      
      const response = await axios.post(`${API_BASE}/tri`, {
        couleur,
        timestamp
      });
      
      console.log(`   üì¶ D√©tection ${i + 1}: ${couleur} (ID: ${response.data.data.id.slice(-8)})`);
      
      // Attendre un peu entre les d√©tections
      await new Promise(resolve => setTimeout(resolve, 10000));
    }
    console.log('‚úÖ 10 d√©tections envoy√©es\n');

    // Test 4: R√©cup√©rer les statistiques
    console.log('4Ô∏è‚É£ R√©cup√©ration des statistiques...');
    const statsResponse = await axios.get(`${API_BASE}/stats`);
    const stats = statsResponse.data.data.stats;
    
    console.log('üìä Statistiques de tri:');
    console.log(`   Total: ${stats.total}`);
    colors.forEach(color => {
      console.log(`   ${color}: ${stats[color]}`);
    });
    console.log('');

    // Test 5: Test du polling intelligent
    console.log('5Ô∏è‚É£ Test du polling intelligent...');
    const timestamp = statsResponse.data.timestamp;
    const pollingResponse = await axios.get(`${API_BASE}/stats?since=${timestamp}`);
    
    if (pollingResponse.status === 304) {
      console.log('‚úÖ Polling intelligent fonctionne (304 - Pas de modification)');
    } else {
      console.log('‚ö†Ô∏è  Polling: nouvelles donn√©es d√©tect√©es');
    }
    console.log('');

    // Test 6: R√©cup√©rer l'historique
    console.log('6Ô∏è‚É£ R√©cup√©ration de l\'historique...');
    const historyResponse = await axios.get(`${API_BASE}/history?limit=5`);
    const history = historyResponse.data.data.detections;
    
    console.log(`üìú Historique (${history.length} derni√®res d√©tections):`);
    history.forEach((detection, index) => {
      const time = new Date(detection.timestamp).toLocaleTimeString('fr-FR');
      console.log(`   ${index + 1}. ${detection.couleur} √† ${time}`);
    });
    console.log('');

    // Test 7: Test d'erreur (couleur invalide)
    console.log('7Ô∏è‚É£ Test de validation (couleur invalide)...');
    try {
      await axios.post(`${API_BASE}/tri`, {
        couleur: 'violet',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      if (error.response && error.response.status === 400) {
        console.log('‚úÖ Validation fonctionne:', error.response.data.message);
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }
    console.log('');

    console.log('üéâ Tous les tests sont pass√©s avec succ√®s!');
    console.log('üîß L\'API est pr√™te √† recevoir les donn√©es de l\'ESP-01');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Assurez-vous que le serveur API est d√©marr√© avec: npm run dev');
    }
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI };